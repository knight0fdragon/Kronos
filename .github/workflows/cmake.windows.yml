name: Generate Windows Installer

on:
  push:
    branches: [ kronos-cmake_ci ]
  pull_request:
    branches: [ kronos-cmake_ci ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        modules: 'all'
    - name: Download SDL2
      shell: pwsh
      run: |
          Invoke-WebRequest -OutFile SDL2.zip -Uri https://github.com/libsdl-org/SDL/releases/download/release-2.30.8/SDL2-devel-2.30.8-VC.zip
    - name: Install SDL2
      shell: pwsh
      run: |
          Expand-Archive -Force SDL2.zip .\
          mv SDL2-2.30.8 ${{github.workspace}}/SDL2
          rm SDL2.zip
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      env:
        sdl2lib_DIR: ${{github.workspace}}\SDL2
        sdl2_DIR: ${{github.workspace}}\SDL2\cmake
      run: |
        cmake -S ${{github.workspace}}/yabause -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DYAB_IS_WIP=ON

    - name: Build
      # Build your program with the given configuration
      run: |
        echo "Compiling"
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target package

    #- name: Test
      #working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #run: ctest -C ${{env.BUILD_TYPE}}
    - name: Prepare package
      id: rename
      shell: bash
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c 1-7)
        NAME=$(find build/ -maxdepth 1 -iname "kronos-*.exe")
        mv $NAME kronos-win64-$SHORT_SHA.exe
        echo "ReleaseFile=kronos-win64-$SHORT_SHA.exe" >> "$GITHUB_ENV"
        echo "ArtifactName=kronos-win64-$SHORT_SHA" >> "$GITHUB_ENV"
    - name: Binary upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.ArtifactName}}
        path: ${{env.ReleaseFile}}

